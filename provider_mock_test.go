// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockProvider) Register(container Container) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", container)
}

// Register indicates an expected call of Register
func (mr *MockProviderMockRecorder) Register(container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProvider)(nil).Register), container)
}

// Boot mocks base method
func (m *MockProvider) Boot(container Container) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Boot", container)
}

// Boot indicates an expected call of Boot
func (mr *MockProviderMockRecorder) Boot(container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockProvider)(nil).Boot), container)
}
