// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogFormatter is a mock of LogFormatter interface
type MockLogFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockLogFormatterMockRecorder
}

// MockLogFormatterMockRecorder is the mock recorder for MockLogFormatter
type MockLogFormatterMockRecorder struct {
	mock *MockLogFormatter
}

// NewMockLogFormatter creates a new mock instance
func NewMockLogFormatter(ctrl *gomock.Controller) *MockLogFormatter {
	mock := &MockLogFormatter{ctrl: ctrl}
	mock.recorder = &MockLogFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFormatter) EXPECT() *MockLogFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *MockLogFormatter) Format(level LogLevel, message string, fields map[string]interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", level, message, fields)
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockLogFormatterMockRecorder) Format(level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockLogFormatter)(nil).Format), level, message, fields)
}

// MockLogFormatterFactoryStrategy is a mock of LogFormatterFactoryStrategy interface
type MockLogFormatterFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockLogFormatterFactoryStrategyMockRecorder
}

// MockLogFormatterFactoryStrategyMockRecorder is the mock recorder for MockLogFormatterFactoryStrategy
type MockLogFormatterFactoryStrategyMockRecorder struct {
	mock *MockLogFormatterFactoryStrategy
}

// NewMockLogFormatterFactoryStrategy creates a new mock instance
func NewMockLogFormatterFactoryStrategy(ctrl *gomock.Controller) *MockLogFormatterFactoryStrategy {
	mock := &MockLogFormatterFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockLogFormatterFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFormatterFactoryStrategy) EXPECT() *MockLogFormatterFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockLogFormatterFactoryStrategy) Accept(format string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockLogFormatterFactoryStrategyMockRecorder) Accept(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockLogFormatterFactoryStrategy)(nil).Accept), varargs...)
}

// Create mocks base method
func (m *MockLogFormatterFactoryStrategy) Create(args ...interface{}) (LogFormatter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(LogFormatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLogFormatterFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogFormatterFactoryStrategy)(nil).Create), args...)
}

// MockLogStream is a mock of LogStream interface
type MockLogStream struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamMockRecorder
}

// MockLogStreamMockRecorder is the mock recorder for MockLogStream
type MockLogStreamMockRecorder struct {
	mock *MockLogStream
}

// NewMockLogStream creates a new mock instance
func NewMockLogStream(ctrl *gomock.Controller) *MockLogStream {
	mock := &MockLogStream{ctrl: ctrl}
	mock.recorder = &MockLogStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStream) EXPECT() *MockLogStreamMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLogStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogStream)(nil).Close))
}

// Signal mocks base method
func (m *MockLogStream) Signal(channel string, level LogLevel, message string, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signal", channel, level, message, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signal indicates an expected call of Signal
func (mr *MockLogStreamMockRecorder) Signal(channel, level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockLogStream)(nil).Signal), channel, level, message, fields)
}

// Broadcast mocks base method
func (m *MockLogStream) Broadcast(level LogLevel, message string, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", level, message, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockLogStreamMockRecorder) Broadcast(level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockLogStream)(nil).Broadcast), level, message, fields)
}

// HasChannel mocks base method
func (m *MockLogStream) HasChannel(channel string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChannel", channel)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChannel indicates an expected call of HasChannel
func (mr *MockLogStreamMockRecorder) HasChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChannel", reflect.TypeOf((*MockLogStream)(nil).HasChannel), channel)
}

// ListChannels mocks base method
func (m *MockLogStream) ListChannels() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockLogStreamMockRecorder) ListChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockLogStream)(nil).ListChannels))
}

// AddChannel mocks base method
func (m *MockLogStream) AddChannel(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChannel", channel)
}

// AddChannel indicates an expected call of AddChannel
func (mr *MockLogStreamMockRecorder) AddChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannel", reflect.TypeOf((*MockLogStream)(nil).AddChannel), channel)
}

// RemoveChannel mocks base method
func (m *MockLogStream) RemoveChannel(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveChannel", channel)
}

// RemoveChannel indicates an expected call of RemoveChannel
func (mr *MockLogStreamMockRecorder) RemoveChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannel", reflect.TypeOf((*MockLogStream)(nil).RemoveChannel), channel)
}

// Level mocks base method
func (m *MockLogStream) Level() LogLevel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(LogLevel)
	return ret0
}

// Level indicates an expected call of Level
func (mr *MockLogStreamMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLogStream)(nil).Level))
}

// MockLogStreamFactoryStrategy is a mock of LogStreamFactoryStrategy interface
type MockLogStreamFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamFactoryStrategyMockRecorder
}

// MockLogStreamFactoryStrategyMockRecorder is the mock recorder for MockLogStreamFactoryStrategy
type MockLogStreamFactoryStrategyMockRecorder struct {
	mock *MockLogStreamFactoryStrategy
}

// NewMockLogStreamFactoryStrategy creates a new mock instance
func NewMockLogStreamFactoryStrategy(ctrl *gomock.Controller) *MockLogStreamFactoryStrategy {
	mock := &MockLogStreamFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockLogStreamFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStreamFactoryStrategy) EXPECT() *MockLogStreamFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockLogStreamFactoryStrategy) Accept(sourceType string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{sourceType}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockLogStreamFactoryStrategyMockRecorder) Accept(sourceType interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sourceType}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).Accept), varargs...)
}

// AcceptConfig mocks base method
func (m *MockLogStreamFactoryStrategy) AcceptConfig(conf ConfigPartial) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConfig", conf)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptConfig indicates an expected call of AcceptConfig
func (mr *MockLogStreamFactoryStrategyMockRecorder) AcceptConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConfig", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).AcceptConfig), conf)
}

// Create mocks base method
func (m *MockLogStreamFactoryStrategy) Create(args ...interface{}) (LogStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLogStreamFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).Create), args...)
}

// CreateConfig mocks base method
func (m *MockLogStreamFactoryStrategy) CreateConfig(conf ConfigPartial) (LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockLogStreamFactoryStrategyMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).CreateConfig), conf)
}
