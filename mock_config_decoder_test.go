// Code generated by MockGen. DO NOT EDIT.
// Source: config_decoder.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigDecoder is a mock of ConfigDecoder interface
type MockConfigDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDecoderMockRecorder
}

// MockConfigDecoderMockRecorder is the mock recorder for MockConfigDecoder
type MockConfigDecoderMockRecorder struct {
	mock *MockConfigDecoder
}

// NewMockConfigDecoder creates a new mock instance
func NewMockConfigDecoder(ctrl *gomock.Controller) *MockConfigDecoder {
	mock := &MockConfigDecoder{ctrl: ctrl}
	mock.recorder = &MockConfigDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigDecoder) EXPECT() *MockConfigDecoderMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigDecoder) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigDecoderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigDecoder)(nil).Close))
}

// Decode mocks base method
func (m *MockConfigDecoder) Decode() (ConfigPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode")
	ret0, _ := ret[0].(ConfigPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockConfigDecoderMockRecorder) Decode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockConfigDecoder)(nil).Decode))
}
