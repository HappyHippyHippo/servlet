// Code generated by MockGen. DO NOT EDIT.
// Source: middleware/log_response_writer.go

// Package middleware is a generated GoMock package.
package middleware

import (
	"bufio"
	"net"
	"net/http"
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockGinResponseWriter is a mock of ReadCloser interface
type MockGinResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGinResponseWriterMockRecorder
}

// MockGinResponseWriterMockRecorder is the mock recorder for MockGinResponseWriter
type MockGinResponseWriterMockRecorder struct {
	mock *MockGinResponseWriter
}

// NewMockGinResponseWriter creates a new mock instance
func NewMockGinResponseWriter(ctrl *gomock.Controller) *MockGinResponseWriter {
	mock := &MockGinResponseWriter{ctrl: ctrl}
	mock.recorder = &MockGinResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGinResponseWriter) EXPECT() *MockGinResponseWriterMockRecorder {
	return m.recorder
}

// Header mocks base method
func (m *MockGinResponseWriter) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockGinResponseWriterMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGinResponseWriter)(nil).Header))
}

// Write mocks base method
func (m *MockGinResponseWriter) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockGinResponseWriterMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockGinResponseWriter)(nil).Write), b)
}

// WriteHeader mocks base method
func (m *MockGinResponseWriter) WriteHeader(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", statusCode)
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockGinResponseWriterMockRecorder) WriteHeader(statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockGinResponseWriter)(nil).WriteHeader), statusCode)
}

// Hijack mocks base method
func (m *MockGinResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseNotify")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(*bufio.ReadWriter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hijack indicates an expected call of Hijack
func (mr *MockGinResponseWriterMockRecorder) Hijack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockGinResponseWriter)(nil).Hijack))
}

// Flush mocks base method
func (m *MockGinResponseWriter) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush
func (mr *MockGinResponseWriterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockGinResponseWriter)(nil).Flush))
}

// CloseNotify mocks base method
func (m *MockGinResponseWriter) CloseNotify() <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseNotify")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// CloseNotify indicates an expected call of CloseNotify
func (mr *MockGinResponseWriterMockRecorder) CloseNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseNotify", reflect.TypeOf((*MockGinResponseWriter)(nil).CloseNotify))
}

// Status mocks base method
func (m *MockGinResponseWriter) Status() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockGinResponseWriterMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockGinResponseWriter)(nil).Status))
}

// Size mocks base method
func (m *MockGinResponseWriter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockGinResponseWriterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockGinResponseWriter)(nil).Size))
}

// WriteString mocks base method
func (m *MockGinResponseWriter) WriteString(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MockGinResponseWriterMockRecorder) WriteString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockGinResponseWriter)(nil).WriteString), s)
}

// Written mocks base method
func (m *MockGinResponseWriter) Written() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Written")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Written indicates an expected call of Written
func (mr *MockGinResponseWriterMockRecorder) Written() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Written", reflect.TypeOf((*MockGinResponseWriter)(nil).Written))
}

// WriteHeaderNow mocks base method
func (m *MockGinResponseWriter) WriteHeaderNow() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeaderNow")
}

// WriteHeaderNow indicates an expected call of WriteHeaderNow
func (mr *MockGinResponseWriterMockRecorder) WriteHeaderNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeaderNow", reflect.TypeOf((*MockGinResponseWriter)(nil).WriteHeaderNow))
}

// Pusher mocks base method
func (m *MockGinResponseWriter) Pusher() http.Pusher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pusher")
	ret0, _ := ret[0].(http.Pusher)
	return ret0
}

// Pusher indicates an expected call of Pusher
func (mr *MockGinResponseWriterMockRecorder) Pusher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pusher", reflect.TypeOf((*MockGinResponseWriter)(nil).Pusher))
}
