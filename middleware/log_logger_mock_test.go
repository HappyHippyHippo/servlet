// Code generated by MockGen. DO NOT EDIT.
// Source: log/logger.go

// Package middleware is a generated GoMock package.
package middleware

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/happyhippyhippo/servlet/log"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogger)(nil).Close))
}

// Signal mocks base method
func (m *MockLogger) Signal(channel string, level log.Level, message string, fields log.F) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signal", channel, level, message, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signal indicates an expected call of Signal
func (mr *MockLoggerMockRecorder) Signal(channel, level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockLogger)(nil).Signal), channel, level, message, fields)
}

// Broadcast mocks base method
func (m *MockLogger) Broadcast(level log.Level, message string, fields log.F) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", level, message, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockLoggerMockRecorder) Broadcast(level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockLogger)(nil).Broadcast), level, message, fields)
}

// HasStream mocks base method
func (m *MockLogger) HasStream(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStream", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStream indicates an expected call of HasStream
func (mr *MockLoggerMockRecorder) HasStream(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStream", reflect.TypeOf((*MockLogger)(nil).HasStream), id)
}

// AddStream mocks base method
func (m *MockLogger) AddStream(id string, stream log.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStream", id, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStream indicates an expected call of AddStream
func (mr *MockLoggerMockRecorder) AddStream(id, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStream", reflect.TypeOf((*MockLogger)(nil).AddStream), id, stream)
}

// RemoveStream mocks base method
func (m *MockLogger) RemoveStream(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveStream", id)
}

// RemoveStream indicates an expected call of RemoveStream
func (mr *MockLoggerMockRecorder) RemoveStream(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStream", reflect.TypeOf((*MockLogger)(nil).RemoveStream), id)
}

// Stream mocks base method
func (m *MockLogger) Stream(id string) log.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", id)
	ret0, _ := ret[0].(log.Stream)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockLoggerMockRecorder) Stream(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockLogger)(nil).Stream), id)
}
