// Code generated by MockGen. DO NOT EDIT.
// Source: middleware/log_request_reader.go

// Package middleware is a generated GoMock package.
package middleware

import (
	gomock "github.com/golang/mock/gomock"
	servlet "github.com/happyhippyhippo/servlet"
	reflect "reflect"
)

// MockLogRequestReader is a mock of LogRequestReader interface
type MockLogRequestReader struct {
	ctrl     *gomock.Controller
	recorder *MockLogRequestReaderMockRecorder
}

// MockLogRequestReaderMockRecorder is the mock recorder for MockLogRequestReader
type MockLogRequestReaderMockRecorder struct {
	mock *MockLogRequestReader
}

// NewMockLogRequestReader creates a new mock instance
func NewMockLogRequestReader(ctrl *gomock.Controller) *MockLogRequestReader {
	mock := &MockLogRequestReader{ctrl: ctrl}
	mock.recorder = &MockLogRequestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogRequestReader) EXPECT() *MockLogRequestReaderMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLogRequestReader) Get(context servlet.Context) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", context)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockLogRequestReaderMockRecorder) Get(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogRequestReader)(nil).Get), context)
}
