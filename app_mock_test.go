// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClosable is a mock of Closable interface
type MockClosable struct {
	ctrl     *gomock.Controller
	recorder *MockClosableMockRecorder
}

// MockClosableMockRecorder is the mock recorder for MockClosable
type MockClosableMockRecorder struct {
	mock *MockClosable
}

// NewMockClosable creates a new mock instance
func NewMockClosable(ctrl *gomock.Controller) *MockClosable {
	mock := &MockClosable{ctrl: ctrl}
	mock.recorder = &MockClosableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClosable) EXPECT() *MockClosableMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClosable) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClosableMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClosable)(nil).Close))
}

// MockAppProvider is a mock of AppProvider interface
type MockAppProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAppProviderMockRecorder
}

// MockAppProviderMockRecorder is the mock recorder for MockAppProvider
type MockAppProviderMockRecorder struct {
	mock *MockAppProvider
}

// NewMockAppProvider creates a new mock instance
func NewMockAppProvider(ctrl *gomock.Controller) *MockAppProvider {
	mock := &MockAppProvider{ctrl: ctrl}
	mock.recorder = &MockAppProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppProvider) EXPECT() *MockAppProviderMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockAppProvider) Register(arg0 *AppContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockAppProviderMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAppProvider)(nil).Register), arg0)
}

// Boot mocks base method
func (m *MockAppProvider) Boot(arg0 *AppContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Boot indicates an expected call of Boot
func (mr *MockAppProviderMockRecorder) Boot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockAppProvider)(nil).Boot), arg0)
}
