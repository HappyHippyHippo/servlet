// Code generated by MockGen. DO NOT EDIT.
// Source: log_stream_factory_strategy.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogStreamFactoryStrategy is a mock of LogStreamFactoryStrategy interface
type MockLogStreamFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamFactoryStrategyMockRecorder
}

// MockLogStreamFactoryStrategyMockRecorder is the mock recorder for MockLogStreamFactoryStrategy
type MockLogStreamFactoryStrategyMockRecorder struct {
	mock *MockLogStreamFactoryStrategy
}

// NewMockLogStreamFactoryStrategy creates a new mock instance
func NewMockLogStreamFactoryStrategy(ctrl *gomock.Controller) *MockLogStreamFactoryStrategy {
	mock := &MockLogStreamFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockLogStreamFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStreamFactoryStrategy) EXPECT() *MockLogStreamFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockLogStreamFactoryStrategy) Accept(sourceType string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{sourceType}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockLogStreamFactoryStrategyMockRecorder) Accept(sourceType interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sourceType}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).Accept), varargs...)
}

// AcceptConfig mocks base method
func (m *MockLogStreamFactoryStrategy) AcceptConfig(conf ConfigPartial) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConfig", conf)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptConfig indicates an expected call of AcceptConfig
func (mr *MockLogStreamFactoryStrategyMockRecorder) AcceptConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConfig", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).AcceptConfig), conf)
}

// Create mocks base method
func (m *MockLogStreamFactoryStrategy) Create(args ...interface{}) (LogStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLogStreamFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).Create), args...)
}

// CreateConfig mocks base method
func (m *MockLogStreamFactoryStrategy) CreateConfig(conf ConfigPartial) (LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockLogStreamFactoryStrategyMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockLogStreamFactoryStrategy)(nil).CreateConfig), conf)
}
