// Code generated by MockGen. DO NOT EDIT.
// Source: log_formatter.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogFormatter is a mock of LogFormatter interface
type MockLogFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockLogFormatterMockRecorder
}

// MockLogFormatterMockRecorder is the mock recorder for MockLogFormatter
type MockLogFormatterMockRecorder struct {
	mock *MockLogFormatter
}

// NewMockLogFormatter creates a new mock instance
func NewMockLogFormatter(ctrl *gomock.Controller) *MockLogFormatter {
	mock := &MockLogFormatter{ctrl: ctrl}
	mock.recorder = &MockLogFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFormatter) EXPECT() *MockLogFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *MockLogFormatter) Format(level LogLevel, message string, fields map[string]interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", level, message, fields)
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockLogFormatterMockRecorder) Format(level, message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockLogFormatter)(nil).Format), level, message, fields)
}
