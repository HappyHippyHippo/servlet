// Code generated by MockGen. DO NOT EDIT.
// Source: config_source_observable.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigObservableSource is a mock of ConfigSourceObservable interface
type MockConfigObservableSource struct {
	ctrl     *gomock.Controller
	recorder *MockConfigObservableSourceMockRecorder
}

// MockConfigObservableSourceMockRecorder is the mock recorder for MockConfigObservableSource
type MockConfigObservableSourceMockRecorder struct {
	mock *MockConfigObservableSource
}

// NewMockConfigObservableSource creates a new mock instance
func NewMockConfigObservableSource(ctrl *gomock.Controller) *MockConfigObservableSource {
	mock := &MockConfigObservableSource{ctrl: ctrl}
	mock.recorder = &MockConfigObservableSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigObservableSource) EXPECT() *MockConfigObservableSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigObservableSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigObservableSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigObservableSource)(nil).Close))
}

// Has mocks base method
func (m *MockConfigObservableSource) Has(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockConfigObservableSourceMockRecorder) Has(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfigObservableSource)(nil).Has), path)
}

// Get mocks base method
func (m *MockConfigObservableSource) Get(path string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigObservableSourceMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigObservableSource)(nil).Get), path)
}

// Reload mocks base method
func (m *MockConfigObservableSource) Reload() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload
func (mr *MockConfigObservableSourceMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockConfigObservableSource)(nil).Reload))
}
