// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	template "html/template"
	http "net/http"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Delims mocks base method
func (m *MockEngine) Delims(left, right string) *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delims", left, right)
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// Delims indicates an expected call of Delims
func (mr *MockEngineMockRecorder) Delims(left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delims", reflect.TypeOf((*MockEngine)(nil).Delims), left, right)
}

// SecureJsonPrefix mocks base method
func (m *MockEngine) SecureJsonPrefix(prefix string) *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecureJsonPrefix", prefix)
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// SecureJsonPrefix indicates an expected call of SecureJsonPrefix
func (mr *MockEngineMockRecorder) SecureJsonPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureJsonPrefix", reflect.TypeOf((*MockEngine)(nil).SecureJsonPrefix), prefix)
}

// LoadHTMLGlob mocks base method
func (m *MockEngine) LoadHTMLGlob(pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadHTMLGlob", pattern)
}

// LoadHTMLGlob indicates an expected call of LoadHTMLGlob
func (mr *MockEngineMockRecorder) LoadHTMLGlob(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLGlob", reflect.TypeOf((*MockEngine)(nil).LoadHTMLGlob), pattern)
}

// LoadHTMLFiles mocks base method
func (m *MockEngine) LoadHTMLFiles(files ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range files {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LoadHTMLFiles", varargs...)
}

// LoadHTMLFiles indicates an expected call of LoadHTMLFiles
func (mr *MockEngineMockRecorder) LoadHTMLFiles(files ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLFiles", reflect.TypeOf((*MockEngine)(nil).LoadHTMLFiles), files...)
}

// SetHTMLTemplate mocks base method
func (m *MockEngine) SetHTMLTemplate(templ *template.Template) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTMLTemplate", templ)
}

// SetHTMLTemplate indicates an expected call of SetHTMLTemplate
func (mr *MockEngineMockRecorder) SetHTMLTemplate(templ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTMLTemplate", reflect.TypeOf((*MockEngine)(nil).SetHTMLTemplate), templ)
}

// SetFuncMap mocks base method
func (m *MockEngine) SetFuncMap(funcMap template.FuncMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFuncMap", funcMap)
}

// SetFuncMap indicates an expected call of SetFuncMap
func (mr *MockEngineMockRecorder) SetFuncMap(funcMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFuncMap", reflect.TypeOf((*MockEngine)(nil).SetFuncMap), funcMap)
}

// NoRoute mocks base method
func (m *MockEngine) NoRoute(handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NoRoute", varargs...)
}

// NoRoute indicates an expected call of NoRoute
func (mr *MockEngineMockRecorder) NoRoute(handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRoute", reflect.TypeOf((*MockEngine)(nil).NoRoute), handlers...)
}

// NoMethod mocks base method
func (m *MockEngine) NoMethod(handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NoMethod", varargs...)
}

// NoMethod indicates an expected call of NoMethod
func (mr *MockEngineMockRecorder) NoMethod(handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoMethod", reflect.TypeOf((*MockEngine)(nil).NoMethod), handlers...)
}

// Use mocks base method
func (m *MockEngine) Use(middleware ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range middleware {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockEngineMockRecorder) Use(middleware ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockEngine)(nil).Use), middleware...)
}

// Routes mocks base method
func (m *MockEngine) Routes() gin.RoutesInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(gin.RoutesInfo)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *MockEngineMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockEngine)(nil).Routes))
}

// Run mocks base method
func (m *MockEngine) Run(addr ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range addr {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockEngineMockRecorder) Run(addr ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEngine)(nil).Run), addr...)
}

// RunTLS mocks base method
func (m *MockEngine) RunTLS(addr, certFile, keyFile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTLS", addr, certFile, keyFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTLS indicates an expected call of RunTLS
func (mr *MockEngineMockRecorder) RunTLS(addr, certFile, keyFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTLS", reflect.TypeOf((*MockEngine)(nil).RunTLS), addr, certFile, keyFile)
}

// RunUnix mocks base method
func (m *MockEngine) RunUnix(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunUnix", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunUnix indicates an expected call of RunUnix
func (mr *MockEngineMockRecorder) RunUnix(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunUnix", reflect.TypeOf((*MockEngine)(nil).RunUnix), file)
}

// RunFd mocks base method
func (m *MockEngine) RunFd(fd int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunFd", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFd indicates an expected call of RunFd
func (mr *MockEngineMockRecorder) RunFd(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFd", reflect.TypeOf((*MockEngine)(nil).RunFd), fd)
}

// ServeHTTP mocks base method
func (m *MockEngine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, req)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockEngineMockRecorder) ServeHTTP(w, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockEngine)(nil).ServeHTTP), w, req)
}

// HandleContext mocks base method
func (m *MockEngine) HandleContext(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleContext", c)
}

// HandleContext indicates an expected call of HandleContext
func (mr *MockEngineMockRecorder) HandleContext(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleContext", reflect.TypeOf((*MockEngine)(nil).HandleContext), c)
}
