// Code generated by MockGen. DO NOT EDIT.
// Source: config/source_factory.go

// Package config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSourceFactory is a mock of SourceFactory interface
type MockSourceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSourceFactoryMockRecorder
}

// MockSourceFactoryMockRecorder is the mock recorder for MockSourceFactory
type MockSourceFactoryMockRecorder struct {
	mock *MockSourceFactory
}

// NewMockSourceFactory creates a new mock instance
func NewMockSourceFactory(ctrl *gomock.Controller) *MockSourceFactory {
	mock := &MockSourceFactory{ctrl: ctrl}
	mock.recorder = &MockSourceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSourceFactory) EXPECT() *MockSourceFactoryMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockSourceFactory) Register(strategy SourceFactoryStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockSourceFactoryMockRecorder) Register(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSourceFactory)(nil).Register), strategy)
}

// Create mocks base method
func (m *MockSourceFactory) Create(format string, args ...interface{}) (Source, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSourceFactoryMockRecorder) Create(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourceFactory)(nil).Create), varargs...)
}

// CreateConfig mocks base method
func (m *MockSourceFactory) CreateConfig(conf Partial) (Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockSourceFactoryMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockSourceFactory)(nil).CreateConfig), conf)
}
