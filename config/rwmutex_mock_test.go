// Code generated by MockGen. DO NOT EDIT.
// Source: sys/rwmutex.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockRWMutex is a mock of RWMutex interface
type MockRWMutex struct {
	ctrl     *gomock.Controller
	recorder *MockRWMutexMockRecorder
}

// MockRWMutexMockRecorder is the mock recorder for MockRWMutex
type MockRWMutexMockRecorder struct {
	mock *MockRWMutex
}

// NewMockRWMutex creates a new mock instance
func NewMockRWMutex(ctrl *gomock.Controller) *MockRWMutex {
	mock := &MockRWMutex{ctrl: ctrl}
	mock.recorder = &MockRWMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRWMutex) EXPECT() *MockRWMutexMockRecorder {
	return m.recorder
}

// RLock mocks base method
func (m *MockRWMutex) RLock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RLock")
}

// RLock indicates an expected call of RLock
func (mr *MockRWMutexMockRecorder) RLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLock", reflect.TypeOf((*MockRWMutex)(nil).RLock))
}

// RUnlock mocks base method
func (m *MockRWMutex) RUnlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RUnlock")
}

// RUnlock indicates an expected call of RUnlock
func (mr *MockRWMutexMockRecorder) RUnlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RUnlock", reflect.TypeOf((*MockRWMutex)(nil).RUnlock))
}

// Lock mocks base method
func (m *MockRWMutex) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock
func (mr *MockRWMutexMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockRWMutex)(nil).Lock))
}

// Unlock mocks base method
func (m *MockRWMutex) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock
func (mr *MockRWMutexMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockRWMutex)(nil).Unlock))
}

// RLocker mocks base method
func (m *MockRWMutex) RLocker() sync.Locker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RLocker")
	ret0, _ := ret[0].(sync.Locker)
	return ret0
}

// RLocker indicates an expected call of RLocker
func (mr *MockRWMutexMockRecorder) RLocker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLocker", reflect.TypeOf((*MockRWMutex)(nil).RLocker))
}
