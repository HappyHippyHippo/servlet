// Code generated by MockGen. DO NOT EDIT.
// Source: config/yaml_decoder.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnderlyingYamlDecoder is a mock of underlyingYamlDecoder interface
type MockUnderlyingYamlDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockUnderlyingYamlDecoderMockRecorder
}

// MockUnderlyingYamlDecoderMockRecorder is the mock recorder for MockunderlyingYamlDecoder
type MockUnderlyingYamlDecoderMockRecorder struct {
	mock *MockUnderlyingYamlDecoder
}

// NewMockUnderlyingYamlDecoder creates a new mock instance
func NewMockUnderlyingYamlDecoder(ctrl *gomock.Controller) *MockUnderlyingYamlDecoder {
	mock := &MockUnderlyingYamlDecoder{ctrl: ctrl}
	mock.recorder = &MockUnderlyingYamlDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnderlyingYamlDecoder) EXPECT() *MockUnderlyingYamlDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockUnderlyingYamlDecoder) Decode(partial interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", partial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockUnderlyingYamlDecoderMockRecorder) Decode(partial interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockUnderlyingYamlDecoder)(nil).Decode), partial)
}
