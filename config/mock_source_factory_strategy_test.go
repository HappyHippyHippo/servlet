// Code generated by MockGen. DO NOT EDIT.
// Source: config/source_factory_strategy.go

// Package config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSourceFactoryStrategy is a mock of SourceFactoryStrategy interface
type MockSourceFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockSourceFactoryStrategyMockRecorder
}

// MockSourceFactoryStrategyMockRecorder is the mock recorder for MockSourceFactoryStrategy
type MockSourceFactoryStrategyMockRecorder struct {
	mock *MockSourceFactoryStrategy
}

// NewMockSourceFactoryStrategy creates a new mock instance
func NewMockSourceFactoryStrategy(ctrl *gomock.Controller) *MockSourceFactoryStrategy {
	mock := &MockSourceFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockSourceFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSourceFactoryStrategy) EXPECT() *MockSourceFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockSourceFactoryStrategy) Accept(stype string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{stype}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockSourceFactoryStrategyMockRecorder) Accept(stype interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stype}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockSourceFactoryStrategy)(nil).Accept), varargs...)
}

// AcceptConfig mocks base method
func (m *MockSourceFactoryStrategy) AcceptConfig(conf Partial) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConfig", conf)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptConfig indicates an expected call of AcceptConfig
func (mr *MockSourceFactoryStrategyMockRecorder) AcceptConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConfig", reflect.TypeOf((*MockSourceFactoryStrategy)(nil).AcceptConfig), conf)
}

// Create mocks base method
func (m *MockSourceFactoryStrategy) Create(args ...interface{}) (Source, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSourceFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourceFactoryStrategy)(nil).Create), args...)
}

// CreateConfig mocks base method
func (m *MockSourceFactoryStrategy) CreateConfig(conf Partial) (Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockSourceFactoryStrategyMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockSourceFactoryStrategy)(nil).CreateConfig), conf)
}
