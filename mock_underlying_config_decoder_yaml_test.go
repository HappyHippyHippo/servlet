// Code generated by MockGen. DO NOT EDIT.
// Source: config_decoder_yaml.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUnderlyingConfigDecoderYaml is a mock of underlyingConfigDecoderYaml interface
type MockUnderlyingConfigDecoderYaml struct {
	ctrl     *gomock.Controller
	recorder *MockUnderlyingConfigDecoderMockRecorderYaml
}

// MockUnderlyingConfigDecoderMockRecorderYaml is the mock recorder for MockunderlyingConfigYamlDecoder
type MockUnderlyingConfigDecoderMockRecorderYaml struct {
	mock *MockUnderlyingConfigDecoderYaml
}

// NewMockUnderlyingConfigDecoderYaml creates a new mock instance
func NewMockUnderlyingConfigDecoderYaml(ctrl *gomock.Controller) *MockUnderlyingConfigDecoderYaml {
	mock := &MockUnderlyingConfigDecoderYaml{ctrl: ctrl}
	mock.recorder = &MockUnderlyingConfigDecoderMockRecorderYaml{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnderlyingConfigDecoderYaml) EXPECT() *MockUnderlyingConfigDecoderMockRecorderYaml {
	return m.recorder
}

// Decode mocks base method
func (m *MockUnderlyingConfigDecoderYaml) Decode(partial interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", partial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockUnderlyingConfigDecoderMockRecorderYaml) Decode(partial interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockUnderlyingConfigDecoderYaml)(nil).Decode), partial)
}
