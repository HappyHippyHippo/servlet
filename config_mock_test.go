// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigDecoder is a mock of ConfigDecoder interface
type MockConfigDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDecoderMockRecorder
}

// MockConfigDecoderMockRecorder is the mock recorder for MockConfigDecoder
type MockConfigDecoderMockRecorder struct {
	mock *MockConfigDecoder
}

// NewMockConfigDecoder creates a new mock instance
func NewMockConfigDecoder(ctrl *gomock.Controller) *MockConfigDecoder {
	mock := &MockConfigDecoder{ctrl: ctrl}
	mock.recorder = &MockConfigDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigDecoder) EXPECT() *MockConfigDecoderMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigDecoder) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigDecoderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigDecoder)(nil).Close))
}

// Decode mocks base method
func (m *MockConfigDecoder) Decode() (ConfigPartial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode")
	ret0, _ := ret[0].(ConfigPartial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockConfigDecoderMockRecorder) Decode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockConfigDecoder)(nil).Decode))
}

// MockConfigDecoderFactoryStrategy is a mock of ConfigDecoderFactoryStrategy interface
type MockConfigDecoderFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDecoderFactoryStrategyMockRecorder
}

// MockConfigDecoderFactoryStrategyMockRecorder is the mock recorder for MockConfigDecoderFactoryStrategy
type MockConfigDecoderFactoryStrategyMockRecorder struct {
	mock *MockConfigDecoderFactoryStrategy
}

// NewMockConfigDecoderFactoryStrategy creates a new mock instance
func NewMockConfigDecoderFactoryStrategy(ctrl *gomock.Controller) *MockConfigDecoderFactoryStrategy {
	mock := &MockConfigDecoderFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockConfigDecoderFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigDecoderFactoryStrategy) EXPECT() *MockConfigDecoderFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockConfigDecoderFactoryStrategy) Accept(format string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockConfigDecoderFactoryStrategyMockRecorder) Accept(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockConfigDecoderFactoryStrategy)(nil).Accept), varargs...)
}

// Create mocks base method
func (m *MockConfigDecoderFactoryStrategy) Create(args ...interface{}) (ConfigDecoder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(ConfigDecoder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockConfigDecoderFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigDecoderFactoryStrategy)(nil).Create), args...)
}

// MockunderlyingConfigYamlDecoder is a mock of underlyingConfigYamlDecoder interface
type MockunderlyingConfigYamlDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockunderlyingConfigYamlDecoderMockRecorder
}

// MockunderlyingConfigYamlDecoderMockRecorder is the mock recorder for MockunderlyingConfigYamlDecoder
type MockunderlyingConfigYamlDecoderMockRecorder struct {
	mock *MockunderlyingConfigYamlDecoder
}

// NewMockunderlyingConfigYamlDecoder creates a new mock instance
func NewMockunderlyingConfigYamlDecoder(ctrl *gomock.Controller) *MockunderlyingConfigYamlDecoder {
	mock := &MockunderlyingConfigYamlDecoder{ctrl: ctrl}
	mock.recorder = &MockunderlyingConfigYamlDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockunderlyingConfigYamlDecoder) EXPECT() *MockunderlyingConfigYamlDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockunderlyingConfigYamlDecoder) Decode(partial interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", partial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockunderlyingConfigYamlDecoderMockRecorder) Decode(partial interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockunderlyingConfigYamlDecoder)(nil).Decode), partial)
}

// MockConfigSource is a mock of ConfigSource interface
type MockConfigSource struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSourceMockRecorder
}

// MockConfigSourceMockRecorder is the mock recorder for MockConfigSource
type MockConfigSourceMockRecorder struct {
	mock *MockConfigSource
}

// NewMockConfigSource creates a new mock instance
func NewMockConfigSource(ctrl *gomock.Controller) *MockConfigSource {
	mock := &MockConfigSource{ctrl: ctrl}
	mock.recorder = &MockConfigSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigSource) EXPECT() *MockConfigSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigSource)(nil).Close))
}

// Has mocks base method
func (m *MockConfigSource) Has(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockConfigSourceMockRecorder) Has(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfigSource)(nil).Has), path)
}

// Get mocks base method
func (m *MockConfigSource) Get(path string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigSourceMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigSource)(nil).Get), path)
}

// MockConfigObservableSource is a mock of ConfigObservableSource interface
type MockConfigObservableSource struct {
	ctrl     *gomock.Controller
	recorder *MockConfigObservableSourceMockRecorder
}

// MockConfigObservableSourceMockRecorder is the mock recorder for MockConfigObservableSource
type MockConfigObservableSourceMockRecorder struct {
	mock *MockConfigObservableSource
}

// NewMockConfigObservableSource creates a new mock instance
func NewMockConfigObservableSource(ctrl *gomock.Controller) *MockConfigObservableSource {
	mock := &MockConfigObservableSource{ctrl: ctrl}
	mock.recorder = &MockConfigObservableSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigObservableSource) EXPECT() *MockConfigObservableSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigObservableSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigObservableSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigObservableSource)(nil).Close))
}

// Has mocks base method
func (m *MockConfigObservableSource) Has(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockConfigObservableSourceMockRecorder) Has(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfigObservableSource)(nil).Has), path)
}

// Get mocks base method
func (m *MockConfigObservableSource) Get(path string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigObservableSourceMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigObservableSource)(nil).Get), path)
}

// Reload mocks base method
func (m *MockConfigObservableSource) Reload() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload
func (mr *MockConfigObservableSourceMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockConfigObservableSource)(nil).Reload))
}

// MockConfigSourceFactoryStrategy is a mock of ConfigSourceFactoryStrategy interface
type MockConfigSourceFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSourceFactoryStrategyMockRecorder
}

// MockConfigSourceFactoryStrategyMockRecorder is the mock recorder for MockConfigSourceFactoryStrategy
type MockConfigSourceFactoryStrategyMockRecorder struct {
	mock *MockConfigSourceFactoryStrategy
}

// NewMockConfigSourceFactoryStrategy creates a new mock instance
func NewMockConfigSourceFactoryStrategy(ctrl *gomock.Controller) *MockConfigSourceFactoryStrategy {
	mock := &MockConfigSourceFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockConfigSourceFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigSourceFactoryStrategy) EXPECT() *MockConfigSourceFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockConfigSourceFactoryStrategy) Accept(sourceType string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{sourceType}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockConfigSourceFactoryStrategyMockRecorder) Accept(sourceType interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sourceType}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockConfigSourceFactoryStrategy)(nil).Accept), varargs...)
}

// AcceptConfig mocks base method
func (m *MockConfigSourceFactoryStrategy) AcceptConfig(conf ConfigPartial) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConfig", conf)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcceptConfig indicates an expected call of AcceptConfig
func (mr *MockConfigSourceFactoryStrategyMockRecorder) AcceptConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConfig", reflect.TypeOf((*MockConfigSourceFactoryStrategy)(nil).AcceptConfig), conf)
}

// Create mocks base method
func (m *MockConfigSourceFactoryStrategy) Create(args ...interface{}) (ConfigSource, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(ConfigSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockConfigSourceFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigSourceFactoryStrategy)(nil).Create), args...)
}

// CreateConfig mocks base method
func (m *MockConfigSourceFactoryStrategy) CreateConfig(conf ConfigPartial) (ConfigSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(ConfigSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockConfigSourceFactoryStrategyMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockConfigSourceFactoryStrategy)(nil).CreateConfig), conf)
}
