// Code generated by MockGen. DO NOT EDIT.
// Source: config_source.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigSource is a mock of ConfigSource interface
type MockConfigSource struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSourceMockRecorder
}

// MockConfigSourceMockRecorder is the mock recorder for MockConfigSource
type MockConfigSourceMockRecorder struct {
	mock *MockConfigSource
}

// NewMockConfigSource creates a new mock instance
func NewMockConfigSource(ctrl *gomock.Controller) *MockConfigSource {
	mock := &MockConfigSource{ctrl: ctrl}
	mock.recorder = &MockConfigSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigSource) EXPECT() *MockConfigSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfigSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConfigSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigSource)(nil).Close))
}

// Has mocks base method
func (m *MockConfigSource) Has(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockConfigSourceMockRecorder) Has(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfigSource)(nil).Has), path)
}

// Get mocks base method
func (m *MockConfigSource) Get(path string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigSourceMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigSource)(nil).Get), path)
}
