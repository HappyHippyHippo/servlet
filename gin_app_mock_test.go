// Code generated by MockGen. DO NOT EDIT.
// Source: gin_app.go

// Package servlet is a generated GoMock package.
package servlet

import (
	bufio "bufio"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	render "github.com/gin-gonic/gin/render"
	gomock "github.com/golang/mock/gomock"
	template "html/template"
	io "io"
	multipart "mime/multipart"
	net "net"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockGinEngine is a mock of GinEngine interface
type MockGinEngine struct {
	ctrl     *gomock.Controller
	recorder *MockGinEngineMockRecorder
}

// MockGinEngineMockRecorder is the mock recorder for MockGinEngine
type MockGinEngineMockRecorder struct {
	mock *MockGinEngine
}

// NewMockGinEngine creates a new mock instance
func NewMockGinEngine(ctrl *gomock.Controller) *MockGinEngine {
	mock := &MockGinEngine{ctrl: ctrl}
	mock.recorder = &MockGinEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGinEngine) EXPECT() *MockGinEngineMockRecorder {
	return m.recorder
}

// Use mocks base method
func (m *MockGinEngine) Use(arg0 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockGinEngineMockRecorder) Use(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockGinEngine)(nil).Use), arg0...)
}

// Handle mocks base method
func (m *MockGinEngine) Handle(arg0, arg1 string, arg2 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockGinEngineMockRecorder) Handle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGinEngine)(nil).Handle), varargs...)
}

// Any mocks base method
func (m *MockGinEngine) Any(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Any", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// Any indicates an expected call of Any
func (mr *MockGinEngineMockRecorder) Any(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockGinEngine)(nil).Any), varargs...)
}

// GET mocks base method
func (m *MockGinEngine) GET(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GET", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// GET indicates an expected call of GET
func (mr *MockGinEngineMockRecorder) GET(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockGinEngine)(nil).GET), varargs...)
}

// POST mocks base method
func (m *MockGinEngine) POST(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "POST", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// POST indicates an expected call of POST
func (mr *MockGinEngineMockRecorder) POST(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockGinEngine)(nil).POST), varargs...)
}

// DELETE mocks base method
func (m *MockGinEngine) DELETE(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DELETE", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// DELETE indicates an expected call of DELETE
func (mr *MockGinEngineMockRecorder) DELETE(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockGinEngine)(nil).DELETE), varargs...)
}

// PATCH mocks base method
func (m *MockGinEngine) PATCH(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PATCH", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// PATCH indicates an expected call of PATCH
func (mr *MockGinEngineMockRecorder) PATCH(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockGinEngine)(nil).PATCH), varargs...)
}

// PUT mocks base method
func (m *MockGinEngine) PUT(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PUT", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// PUT indicates an expected call of PUT
func (mr *MockGinEngineMockRecorder) PUT(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockGinEngine)(nil).PUT), varargs...)
}

// OPTIONS mocks base method
func (m *MockGinEngine) OPTIONS(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OPTIONS", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS
func (mr *MockGinEngineMockRecorder) OPTIONS(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockGinEngine)(nil).OPTIONS), varargs...)
}

// HEAD mocks base method
func (m *MockGinEngine) HEAD(arg0 string, arg1 ...gin.HandlerFunc) gin.IRoutes {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HEAD", varargs...)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// HEAD indicates an expected call of HEAD
func (mr *MockGinEngineMockRecorder) HEAD(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockGinEngine)(nil).HEAD), varargs...)
}

// StaticFile mocks base method
func (m *MockGinEngine) StaticFile(arg0, arg1 string) gin.IRoutes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticFile", arg0, arg1)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// StaticFile indicates an expected call of StaticFile
func (mr *MockGinEngineMockRecorder) StaticFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticFile", reflect.TypeOf((*MockGinEngine)(nil).StaticFile), arg0, arg1)
}

// Static mocks base method
func (m *MockGinEngine) Static(arg0, arg1 string) gin.IRoutes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Static", arg0, arg1)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// Static indicates an expected call of Static
func (mr *MockGinEngineMockRecorder) Static(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Static", reflect.TypeOf((*MockGinEngine)(nil).Static), arg0, arg1)
}

// StaticFS mocks base method
func (m *MockGinEngine) StaticFS(arg0 string, arg1 http.FileSystem) gin.IRoutes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticFS", arg0, arg1)
	ret0, _ := ret[0].(gin.IRoutes)
	return ret0
}

// StaticFS indicates an expected call of StaticFS
func (mr *MockGinEngineMockRecorder) StaticFS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticFS", reflect.TypeOf((*MockGinEngine)(nil).StaticFS), arg0, arg1)
}

// Delims mocks base method
func (m *MockGinEngine) Delims(left, right string) *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delims", left, right)
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// Delims indicates an expected call of Delims
func (mr *MockGinEngineMockRecorder) Delims(left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delims", reflect.TypeOf((*MockGinEngine)(nil).Delims), left, right)
}

// HandleContext mocks base method
func (m *MockGinEngine) HandleContext(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleContext", c)
}

// HandleContext indicates an expected call of HandleContext
func (mr *MockGinEngineMockRecorder) HandleContext(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleContext", reflect.TypeOf((*MockGinEngine)(nil).HandleContext), c)
}

// LoadHTMLFiles mocks base method
func (m *MockGinEngine) LoadHTMLFiles(files ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range files {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LoadHTMLFiles", varargs...)
}

// LoadHTMLFiles indicates an expected call of LoadHTMLFiles
func (mr *MockGinEngineMockRecorder) LoadHTMLFiles(files ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLFiles", reflect.TypeOf((*MockGinEngine)(nil).LoadHTMLFiles), files...)
}

// LoadHTMLGlob mocks base method
func (m *MockGinEngine) LoadHTMLGlob(pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadHTMLGlob", pattern)
}

// LoadHTMLGlob indicates an expected call of LoadHTMLGlob
func (mr *MockGinEngineMockRecorder) LoadHTMLGlob(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHTMLGlob", reflect.TypeOf((*MockGinEngine)(nil).LoadHTMLGlob), pattern)
}

// NoMethod mocks base method
func (m *MockGinEngine) NoMethod(handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NoMethod", varargs...)
}

// NoMethod indicates an expected call of NoMethod
func (mr *MockGinEngineMockRecorder) NoMethod(handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoMethod", reflect.TypeOf((*MockGinEngine)(nil).NoMethod), handlers...)
}

// NoRoute mocks base method
func (m *MockGinEngine) NoRoute(handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NoRoute", varargs...)
}

// NoRoute indicates an expected call of NoRoute
func (mr *MockGinEngineMockRecorder) NoRoute(handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRoute", reflect.TypeOf((*MockGinEngine)(nil).NoRoute), handlers...)
}

// Routes mocks base method
func (m *MockGinEngine) Routes() gin.RoutesInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(gin.RoutesInfo)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *MockGinEngineMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockGinEngine)(nil).Routes))
}

// Run mocks base method
func (m *MockGinEngine) Run(addr ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range addr {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockGinEngineMockRecorder) Run(addr ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGinEngine)(nil).Run), addr...)
}

// RunFd mocks base method
func (m *MockGinEngine) RunFd(fd int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunFd", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFd indicates an expected call of RunFd
func (mr *MockGinEngineMockRecorder) RunFd(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFd", reflect.TypeOf((*MockGinEngine)(nil).RunFd), fd)
}

// RunListener mocks base method
func (m *MockGinEngine) RunListener(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunListener indicates an expected call of RunListener
func (mr *MockGinEngineMockRecorder) RunListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunListener", reflect.TypeOf((*MockGinEngine)(nil).RunListener), listener)
}

// RunTLS mocks base method
func (m *MockGinEngine) RunTLS(addr, certFile, keyFile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTLS", addr, certFile, keyFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTLS indicates an expected call of RunTLS
func (mr *MockGinEngineMockRecorder) RunTLS(addr, certFile, keyFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTLS", reflect.TypeOf((*MockGinEngine)(nil).RunTLS), addr, certFile, keyFile)
}

// RunUnix mocks base method
func (m *MockGinEngine) RunUnix(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunUnix", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunUnix indicates an expected call of RunUnix
func (mr *MockGinEngineMockRecorder) RunUnix(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunUnix", reflect.TypeOf((*MockGinEngine)(nil).RunUnix), file)
}

// SecureJsonPrefix mocks base method
func (m *MockGinEngine) SecureJsonPrefix(prefix string) *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecureJsonPrefix", prefix)
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// SecureJsonPrefix indicates an expected call of SecureJsonPrefix
func (mr *MockGinEngineMockRecorder) SecureJsonPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureJsonPrefix", reflect.TypeOf((*MockGinEngine)(nil).SecureJsonPrefix), prefix)
}

// ServeHTTP mocks base method
func (m *MockGinEngine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, req)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockGinEngineMockRecorder) ServeHTTP(w, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockGinEngine)(nil).ServeHTTP), w, req)
}

// SetFuncMap mocks base method
func (m *MockGinEngine) SetFuncMap(funcMap template.FuncMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFuncMap", funcMap)
}

// SetFuncMap indicates an expected call of SetFuncMap
func (mr *MockGinEngineMockRecorder) SetFuncMap(funcMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFuncMap", reflect.TypeOf((*MockGinEngine)(nil).SetFuncMap), funcMap)
}

// SetHTMLTemplate mocks base method
func (m *MockGinEngine) SetHTMLTemplate(templ *template.Template) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTMLTemplate", templ)
}

// SetHTMLTemplate indicates an expected call of SetHTMLTemplate
func (mr *MockGinEngineMockRecorder) SetHTMLTemplate(templ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTMLTemplate", reflect.TypeOf((*MockGinEngine)(nil).SetHTMLTemplate), templ)
}

// MockGinContext is a mock of GinContext interface
type MockGinContext struct {
	ctrl     *gomock.Controller
	recorder *MockGinContextMockRecorder
}

// MockGinContextMockRecorder is the mock recorder for MockGinContext
type MockGinContextMockRecorder struct {
	mock *MockGinContext
}

// NewMockGinContext creates a new mock instance
func NewMockGinContext(ctrl *gomock.Controller) *MockGinContext {
	mock := &MockGinContext{ctrl: ctrl}
	mock.recorder = &MockGinContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGinContext) EXPECT() *MockGinContextMockRecorder {
	return m.recorder
}

// Abort mocks base method
func (m *MockGinContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort
func (mr *MockGinContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockGinContext)(nil).Abort))
}

// AbortWithError mocks base method
func (m *MockGinContext) AbortWithError(code int, err error) *gin.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortWithError", code, err)
	ret0, _ := ret[0].(*gin.Error)
	return ret0
}

// AbortWithError indicates an expected call of AbortWithError
func (mr *MockGinContextMockRecorder) AbortWithError(code, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithError", reflect.TypeOf((*MockGinContext)(nil).AbortWithError), code, err)
}

// AbortWithStatus mocks base method
func (m *MockGinContext) AbortWithStatus(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortWithStatus", code)
}

// AbortWithStatus indicates an expected call of AbortWithStatus
func (mr *MockGinContextMockRecorder) AbortWithStatus(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithStatus", reflect.TypeOf((*MockGinContext)(nil).AbortWithStatus), code)
}

// AbortWithStatusJSON mocks base method
func (m *MockGinContext) AbortWithStatusJSON(code int, jsonObj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortWithStatusJSON", code, jsonObj)
}

// AbortWithStatusJSON indicates an expected call of AbortWithStatusJSON
func (mr *MockGinContextMockRecorder) AbortWithStatusJSON(code, jsonObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithStatusJSON", reflect.TypeOf((*MockGinContext)(nil).AbortWithStatusJSON), code, jsonObj)
}

// AsciiJSON mocks base method
func (m *MockGinContext) AsciiJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsciiJSON", code, obj)
}

// AsciiJSON indicates an expected call of AsciiJSON
func (mr *MockGinContextMockRecorder) AsciiJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsciiJSON", reflect.TypeOf((*MockGinContext)(nil).AsciiJSON), code, obj)
}

// Bind mocks base method
func (m *MockGinContext) Bind(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind
func (mr *MockGinContextMockRecorder) Bind(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockGinContext)(nil).Bind), obj)
}

// BindHeader mocks base method
func (m *MockGinContext) BindHeader(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindHeader", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindHeader indicates an expected call of BindHeader
func (mr *MockGinContextMockRecorder) BindHeader(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindHeader", reflect.TypeOf((*MockGinContext)(nil).BindHeader), obj)
}

// BindJSON mocks base method
func (m *MockGinContext) BindJSON(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON
func (mr *MockGinContextMockRecorder) BindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockGinContext)(nil).BindJSON), obj)
}

// BindQuery mocks base method
func (m *MockGinContext) BindQuery(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQuery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQuery indicates an expected call of BindQuery
func (mr *MockGinContextMockRecorder) BindQuery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQuery", reflect.TypeOf((*MockGinContext)(nil).BindQuery), obj)
}

// BindUri mocks base method
func (m *MockGinContext) BindUri(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindUri", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindUri indicates an expected call of BindUri
func (mr *MockGinContextMockRecorder) BindUri(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindUri", reflect.TypeOf((*MockGinContext)(nil).BindUri), obj)
}

// BindWith mocks base method
func (m *MockGinContext) BindWith(obj interface{}, b binding.Binding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindWith", obj, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindWith indicates an expected call of BindWith
func (mr *MockGinContextMockRecorder) BindWith(obj, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindWith", reflect.TypeOf((*MockGinContext)(nil).BindWith), obj, b)
}

// BindXML mocks base method
func (m *MockGinContext) BindXML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindXML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindXML indicates an expected call of BindXML
func (mr *MockGinContextMockRecorder) BindXML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindXML", reflect.TypeOf((*MockGinContext)(nil).BindXML), obj)
}

// BindYAML mocks base method
func (m *MockGinContext) BindYAML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindYAML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindYAML indicates an expected call of BindYAML
func (mr *MockGinContextMockRecorder) BindYAML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindYAML", reflect.TypeOf((*MockGinContext)(nil).BindYAML), obj)
}

// ClientIP mocks base method
func (m *MockGinContext) ClientIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientIP indicates an expected call of ClientIP
func (mr *MockGinContextMockRecorder) ClientIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientIP", reflect.TypeOf((*MockGinContext)(nil).ClientIP))
}

// ContentType mocks base method
func (m *MockGinContext) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockGinContextMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockGinContext)(nil).ContentType))
}

// Cookie mocks base method
func (m *MockGinContext) Cookie(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cookie indicates an expected call of Cookie
func (mr *MockGinContextMockRecorder) Cookie(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockGinContext)(nil).Cookie), name)
}

// Copy mocks base method
func (m *MockGinContext) Copy() *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockGinContextMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockGinContext)(nil).Copy))
}

// Data mocks base method
func (m *MockGinContext) Data(code int, contentType string, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Data", code, contentType, data)
}

// Data indicates an expected call of Data
func (mr *MockGinContextMockRecorder) Data(code, contentType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockGinContext)(nil).Data), code, contentType, data)
}

// DataFromReader mocks base method
func (m *MockGinContext) DataFromReader(code int, contentLength int64, contentType string, reader io.Reader, extraHeaders map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DataFromReader", code, contentLength, contentType, reader, extraHeaders)
}

// DataFromReader indicates an expected call of DataFromReader
func (mr *MockGinContextMockRecorder) DataFromReader(code, contentLength, contentType, reader, extraHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFromReader", reflect.TypeOf((*MockGinContext)(nil).DataFromReader), code, contentLength, contentType, reader, extraHeaders)
}

// Deadline mocks base method
func (m *MockGinContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockGinContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockGinContext)(nil).Deadline))
}

// DefaultPostForm mocks base method
func (m *MockGinContext) DefaultPostForm(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPostForm", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultPostForm indicates an expected call of DefaultPostForm
func (mr *MockGinContextMockRecorder) DefaultPostForm(key, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPostForm", reflect.TypeOf((*MockGinContext)(nil).DefaultPostForm), key, defaultValue)
}

// DefaultQuery mocks base method
func (m *MockGinContext) DefaultQuery(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultQuery", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultQuery indicates an expected call of DefaultQuery
func (mr *MockGinContextMockRecorder) DefaultQuery(key, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultQuery", reflect.TypeOf((*MockGinContext)(nil).DefaultQuery), key, defaultValue)
}

// Done mocks base method
func (m *MockGinContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockGinContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockGinContext)(nil).Done))
}

// Err mocks base method
func (m *MockGinContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockGinContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGinContext)(nil).Err))
}

// Error mocks base method
func (m *MockGinContext) Error(err error) *gin.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", err)
	ret0, _ := ret[0].(*gin.Error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockGinContextMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGinContext)(nil).Error), err)
}

// File mocks base method
func (m *MockGinContext) File(filepath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "File", filepath)
}

// File indicates an expected call of File
func (mr *MockGinContextMockRecorder) File(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockGinContext)(nil).File), filepath)
}

// FileAttachment mocks base method
func (m *MockGinContext) FileAttachment(filepath, filename string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileAttachment", filepath, filename)
}

// FileAttachment indicates an expected call of FileAttachment
func (mr *MockGinContextMockRecorder) FileAttachment(filepath, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAttachment", reflect.TypeOf((*MockGinContext)(nil).FileAttachment), filepath, filename)
}

// FileFromFS mocks base method
func (m *MockGinContext) FileFromFS(filepath string, fs http.FileSystem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileFromFS", filepath, fs)
}

// FileFromFS indicates an expected call of FileFromFS
func (mr *MockGinContextMockRecorder) FileFromFS(filepath, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileFromFS", reflect.TypeOf((*MockGinContext)(nil).FileFromFS), filepath, fs)
}

// FormFile mocks base method
func (m *MockGinContext) FormFile(name string) (*multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormFile", name)
	ret0, _ := ret[0].(*multipart.FileHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormFile indicates an expected call of FormFile
func (mr *MockGinContextMockRecorder) FormFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockGinContext)(nil).FormFile), name)
}

// FullPath mocks base method
func (m *MockGinContext) FullPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullPath indicates an expected call of FullPath
func (mr *MockGinContextMockRecorder) FullPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullPath", reflect.TypeOf((*MockGinContext)(nil).FullPath))
}

// Get mocks base method
func (m *MockGinContext) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGinContextMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGinContext)(nil).Get), key)
}

// GetBool mocks base method
func (m *MockGinContext) GetBool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool
func (mr *MockGinContextMockRecorder) GetBool(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockGinContext)(nil).GetBool), key)
}

// GetDuration mocks base method
func (m *MockGinContext) GetDuration(key string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockGinContextMockRecorder) GetDuration(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockGinContext)(nil).GetDuration), key)
}

// GetFloat64 mocks base method
func (m *MockGinContext) GetFloat64(key string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", key)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64
func (mr *MockGinContextMockRecorder) GetFloat64(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockGinContext)(nil).GetFloat64), key)
}

// GetHeader mocks base method
func (m *MockGinContext) GetHeader(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockGinContextMockRecorder) GetHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockGinContext)(nil).GetHeader), key)
}

// GetInt mocks base method
func (m *MockGinContext) GetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt
func (mr *MockGinContextMockRecorder) GetInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockGinContext)(nil).GetInt), key)
}

// GetInt64 mocks base method
func (m *MockGinContext) GetInt64(key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64
func (mr *MockGinContextMockRecorder) GetInt64(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockGinContext)(nil).GetInt64), key)
}

// GetPostForm mocks base method
func (m *MockGinContext) GetPostForm(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostForm", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostForm indicates an expected call of GetPostForm
func (mr *MockGinContextMockRecorder) GetPostForm(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostForm", reflect.TypeOf((*MockGinContext)(nil).GetPostForm), key)
}

// GetPostFormArray mocks base method
func (m *MockGinContext) GetPostFormArray(key string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostFormArray", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostFormArray indicates an expected call of GetPostFormArray
func (mr *MockGinContextMockRecorder) GetPostFormArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFormArray", reflect.TypeOf((*MockGinContext)(nil).GetPostFormArray), key)
}

// GetPostFormMap mocks base method
func (m *MockGinContext) GetPostFormMap(key string) (map[string]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostFormMap", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostFormMap indicates an expected call of GetPostFormMap
func (mr *MockGinContextMockRecorder) GetPostFormMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFormMap", reflect.TypeOf((*MockGinContext)(nil).GetPostFormMap), key)
}

// GetQuery mocks base method
func (m *MockGinContext) GetQuery(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery
func (mr *MockGinContextMockRecorder) GetQuery(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockGinContext)(nil).GetQuery), key)
}

// GetQueryArray mocks base method
func (m *MockGinContext) GetQueryArray(key string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryArray", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueryArray indicates an expected call of GetQueryArray
func (mr *MockGinContextMockRecorder) GetQueryArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryArray", reflect.TypeOf((*MockGinContext)(nil).GetQueryArray), key)
}

// GetQueryMap mocks base method
func (m *MockGinContext) GetQueryMap(key string) (map[string]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryMap", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueryMap indicates an expected call of GetQueryMap
func (mr *MockGinContextMockRecorder) GetQueryMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryMap", reflect.TypeOf((*MockGinContext)(nil).GetQueryMap), key)
}

// GetRawData mocks base method
func (m *MockGinContext) GetRawData() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawData indicates an expected call of GetRawData
func (mr *MockGinContextMockRecorder) GetRawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawData", reflect.TypeOf((*MockGinContext)(nil).GetRawData))
}

// GetString mocks base method
func (m *MockGinContext) GetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockGinContextMockRecorder) GetString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockGinContext)(nil).GetString), key)
}

// GetStringMap mocks base method
func (m *MockGinContext) GetStringMap(key string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMap", key)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStringMap indicates an expected call of GetStringMap
func (mr *MockGinContextMockRecorder) GetStringMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMap", reflect.TypeOf((*MockGinContext)(nil).GetStringMap), key)
}

// GetStringMapString mocks base method
func (m *MockGinContext) GetStringMapString(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapString", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStringMapString indicates an expected call of GetStringMapString
func (mr *MockGinContextMockRecorder) GetStringMapString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapString", reflect.TypeOf((*MockGinContext)(nil).GetStringMapString), key)
}

// GetStringMapStringSlice mocks base method
func (m *MockGinContext) GetStringMapStringSlice(key string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapStringSlice", key)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetStringMapStringSlice indicates an expected call of GetStringMapStringSlice
func (mr *MockGinContextMockRecorder) GetStringMapStringSlice(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapStringSlice", reflect.TypeOf((*MockGinContext)(nil).GetStringMapStringSlice), key)
}

// GetStringSlice mocks base method
func (m *MockGinContext) GetStringSlice(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringSlice indicates an expected call of GetStringSlice
func (mr *MockGinContextMockRecorder) GetStringSlice(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockGinContext)(nil).GetStringSlice), key)
}

// GetTime mocks base method
func (m *MockGinContext) GetTime(key string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime", key)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime
func (mr *MockGinContextMockRecorder) GetTime(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockGinContext)(nil).GetTime), key)
}

// HTML mocks base method
func (m *MockGinContext) HTML(code int, name string, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTML", code, name, obj)
}

// HTML indicates an expected call of HTML
func (mr *MockGinContextMockRecorder) HTML(code, name, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockGinContext)(nil).HTML), code, name, obj)
}

// Handler mocks base method
func (m *MockGinContext) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler
func (mr *MockGinContextMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockGinContext)(nil).Handler))
}

// HandlerName mocks base method
func (m *MockGinContext) HandlerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// HandlerName indicates an expected call of HandlerName
func (mr *MockGinContextMockRecorder) HandlerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerName", reflect.TypeOf((*MockGinContext)(nil).HandlerName))
}

// HandlerNames mocks base method
func (m *MockGinContext) HandlerNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// HandlerNames indicates an expected call of HandlerNames
func (mr *MockGinContextMockRecorder) HandlerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerNames", reflect.TypeOf((*MockGinContext)(nil).HandlerNames))
}

// Header mocks base method
func (m *MockGinContext) Header(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", key, value)
}

// Header indicates an expected call of Header
func (mr *MockGinContextMockRecorder) Header(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGinContext)(nil).Header), key, value)
}

// IndentedJSON mocks base method
func (m *MockGinContext) IndentedJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IndentedJSON", code, obj)
}

// IndentedJSON indicates an expected call of IndentedJSON
func (mr *MockGinContextMockRecorder) IndentedJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndentedJSON", reflect.TypeOf((*MockGinContext)(nil).IndentedJSON), code, obj)
}

// IsAborted mocks base method
func (m *MockGinContext) IsAborted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAborted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAborted indicates an expected call of IsAborted
func (mr *MockGinContextMockRecorder) IsAborted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAborted", reflect.TypeOf((*MockGinContext)(nil).IsAborted))
}

// IsWebsocket mocks base method
func (m *MockGinContext) IsWebsocket() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWebsocket")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWebsocket indicates an expected call of IsWebsocket
func (mr *MockGinContextMockRecorder) IsWebsocket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWebsocket", reflect.TypeOf((*MockGinContext)(nil).IsWebsocket))
}

// JSON mocks base method
func (m *MockGinContext) JSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON
func (mr *MockGinContextMockRecorder) JSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockGinContext)(nil).JSON), code, obj)
}

// JSONP mocks base method
func (m *MockGinContext) JSONP(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSONP", code, obj)
}

// JSONP indicates an expected call of JSONP
func (mr *MockGinContextMockRecorder) JSONP(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONP", reflect.TypeOf((*MockGinContext)(nil).JSONP), code, obj)
}

// MultipartForm mocks base method
func (m *MockGinContext) MultipartForm() (*multipart.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartForm")
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartForm indicates an expected call of MultipartForm
func (mr *MockGinContextMockRecorder) MultipartForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartForm", reflect.TypeOf((*MockGinContext)(nil).MultipartForm))
}

// MustBindWith mocks base method
func (m *MockGinContext) MustBindWith(obj interface{}, b binding.Binding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBindWith", obj, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// MustBindWith indicates an expected call of MustBindWith
func (mr *MockGinContextMockRecorder) MustBindWith(obj, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBindWith", reflect.TypeOf((*MockGinContext)(nil).MustBindWith), obj, b)
}

// MustGet mocks base method
func (m *MockGinContext) MustGet(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGet", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MustGet indicates an expected call of MustGet
func (mr *MockGinContextMockRecorder) MustGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockGinContext)(nil).MustGet), key)
}

// Negotiate mocks base method
func (m *MockGinContext) Negotiate(code int, config gin.Negotiate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Negotiate", code, config)
}

// Negotiate indicates an expected call of Negotiate
func (mr *MockGinContextMockRecorder) Negotiate(code, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Negotiate", reflect.TypeOf((*MockGinContext)(nil).Negotiate), code, config)
}

// NegotiateFormat mocks base method
func (m *MockGinContext) NegotiateFormat(offered ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range offered {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NegotiateFormat", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// NegotiateFormat indicates an expected call of NegotiateFormat
func (mr *MockGinContextMockRecorder) NegotiateFormat(offered ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegotiateFormat", reflect.TypeOf((*MockGinContext)(nil).NegotiateFormat), offered...)
}

// Next mocks base method
func (m *MockGinContext) Next() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next")
}

// Next indicates an expected call of Next
func (mr *MockGinContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGinContext)(nil).Next))
}

// Param mocks base method
func (m *MockGinContext) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param
func (mr *MockGinContextMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockGinContext)(nil).Param), key)
}

// PostForm mocks base method
func (m *MockGinContext) PostForm(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostForm indicates an expected call of PostForm
func (mr *MockGinContextMockRecorder) PostForm(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockGinContext)(nil).PostForm), key)
}

// PostFormArray mocks base method
func (m *MockGinContext) PostFormArray(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFormArray", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// PostFormArray indicates an expected call of PostFormArray
func (mr *MockGinContextMockRecorder) PostFormArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFormArray", reflect.TypeOf((*MockGinContext)(nil).PostFormArray), key)
}

// PostFormMap mocks base method
func (m *MockGinContext) PostFormMap(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFormMap", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// PostFormMap indicates an expected call of PostFormMap
func (mr *MockGinContextMockRecorder) PostFormMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFormMap", reflect.TypeOf((*MockGinContext)(nil).PostFormMap), key)
}

// ProtoBuf mocks base method
func (m *MockGinContext) ProtoBuf(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoBuf", code, obj)
}

// ProtoBuf indicates an expected call of ProtoBuf
func (mr *MockGinContextMockRecorder) ProtoBuf(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoBuf", reflect.TypeOf((*MockGinContext)(nil).ProtoBuf), code, obj)
}

// PureJSON mocks base method
func (m *MockGinContext) PureJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PureJSON", code, obj)
}

// PureJSON indicates an expected call of PureJSON
func (mr *MockGinContextMockRecorder) PureJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PureJSON", reflect.TypeOf((*MockGinContext)(nil).PureJSON), code, obj)
}

// Query mocks base method
func (m *MockGinContext) Query(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockGinContextMockRecorder) Query(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGinContext)(nil).Query), key)
}

// QueryArray mocks base method
func (m *MockGinContext) QueryArray(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArray", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// QueryArray indicates an expected call of QueryArray
func (mr *MockGinContextMockRecorder) QueryArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArray", reflect.TypeOf((*MockGinContext)(nil).QueryArray), key)
}

// QueryMap mocks base method
func (m *MockGinContext) QueryMap(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMap", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// QueryMap indicates an expected call of QueryMap
func (mr *MockGinContextMockRecorder) QueryMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMap", reflect.TypeOf((*MockGinContext)(nil).QueryMap), key)
}

// Redirect mocks base method
func (m *MockGinContext) Redirect(code int, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", code, location)
}

// Redirect indicates an expected call of Redirect
func (mr *MockGinContextMockRecorder) Redirect(code, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockGinContext)(nil).Redirect), code, location)
}

// Render mocks base method
func (m *MockGinContext) Render(code int, r render.Render) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", code, r)
}

// Render indicates an expected call of Render
func (mr *MockGinContextMockRecorder) Render(code, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockGinContext)(nil).Render), code, r)
}

// SSEvent mocks base method
func (m *MockGinContext) SSEvent(name string, message interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SSEvent", name, message)
}

// SSEvent indicates an expected call of SSEvent
func (mr *MockGinContextMockRecorder) SSEvent(name, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSEvent", reflect.TypeOf((*MockGinContext)(nil).SSEvent), name, message)
}

// SaveUploadedFile mocks base method
func (m *MockGinContext) SaveUploadedFile(file *multipart.FileHeader, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUploadedFile", file, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUploadedFile indicates an expected call of SaveUploadedFile
func (mr *MockGinContextMockRecorder) SaveUploadedFile(file, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUploadedFile", reflect.TypeOf((*MockGinContext)(nil).SaveUploadedFile), file, dst)
}

// SecureJSON mocks base method
func (m *MockGinContext) SecureJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SecureJSON", code, obj)
}

// SecureJSON indicates an expected call of SecureJSON
func (mr *MockGinContextMockRecorder) SecureJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureJSON", reflect.TypeOf((*MockGinContext)(nil).SecureJSON), code, obj)
}

// Set mocks base method
func (m *MockGinContext) Set(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set
func (mr *MockGinContextMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGinContext)(nil).Set), key, value)
}

// SetAccepted mocks base method
func (m *MockGinContext) SetAccepted(formats ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range formats {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetAccepted", varargs...)
}

// SetAccepted indicates an expected call of SetAccepted
func (mr *MockGinContextMockRecorder) SetAccepted(formats ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccepted", reflect.TypeOf((*MockGinContext)(nil).SetAccepted), formats...)
}

// SetCookie mocks base method
func (m *MockGinContext) SetCookie(name, value string, maxAge int, path, domain string, secure, httpOnly bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", name, value, maxAge, path, domain, secure, httpOnly)
}

// SetCookie indicates an expected call of SetCookie
func (mr *MockGinContextMockRecorder) SetCookie(name, value, maxAge, path, domain, secure, httpOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockGinContext)(nil).SetCookie), name, value, maxAge, path, domain, secure, httpOnly)
}

// SetSameSite mocks base method
func (m *MockGinContext) SetSameSite(samesite http.SameSite) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSameSite", samesite)
}

// SetSameSite indicates an expected call of SetSameSite
func (mr *MockGinContextMockRecorder) SetSameSite(samesite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSameSite", reflect.TypeOf((*MockGinContext)(nil).SetSameSite), samesite)
}

// ShouldBind mocks base method
func (m *MockGinContext) ShouldBind(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBind", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBind indicates an expected call of ShouldBind
func (mr *MockGinContextMockRecorder) ShouldBind(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBind", reflect.TypeOf((*MockGinContext)(nil).ShouldBind), obj)
}

// ShouldBindBodyWith mocks base method
func (m *MockGinContext) ShouldBindBodyWith(obj interface{}, bb binding.BindingBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindBodyWith", obj, bb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindBodyWith indicates an expected call of ShouldBindBodyWith
func (mr *MockGinContextMockRecorder) ShouldBindBodyWith(obj, bb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindBodyWith", reflect.TypeOf((*MockGinContext)(nil).ShouldBindBodyWith), obj, bb)
}

// ShouldBindHeader mocks base method
func (m *MockGinContext) ShouldBindHeader(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindHeader", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindHeader indicates an expected call of ShouldBindHeader
func (mr *MockGinContextMockRecorder) ShouldBindHeader(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindHeader", reflect.TypeOf((*MockGinContext)(nil).ShouldBindHeader), obj)
}

// ShouldBindJSON mocks base method
func (m *MockGinContext) ShouldBindJSON(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindJSON indicates an expected call of ShouldBindJSON
func (mr *MockGinContextMockRecorder) ShouldBindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindJSON", reflect.TypeOf((*MockGinContext)(nil).ShouldBindJSON), obj)
}

// ShouldBindQuery mocks base method
func (m *MockGinContext) ShouldBindQuery(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindQuery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindQuery indicates an expected call of ShouldBindQuery
func (mr *MockGinContextMockRecorder) ShouldBindQuery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindQuery", reflect.TypeOf((*MockGinContext)(nil).ShouldBindQuery), obj)
}

// ShouldBindUri mocks base method
func (m *MockGinContext) ShouldBindUri(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindUri", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindUri indicates an expected call of ShouldBindUri
func (mr *MockGinContextMockRecorder) ShouldBindUri(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindUri", reflect.TypeOf((*MockGinContext)(nil).ShouldBindUri), obj)
}

// ShouldBindWith mocks base method
func (m *MockGinContext) ShouldBindWith(obj interface{}, b binding.Binding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindWith", obj, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindWith indicates an expected call of ShouldBindWith
func (mr *MockGinContextMockRecorder) ShouldBindWith(obj, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindWith", reflect.TypeOf((*MockGinContext)(nil).ShouldBindWith), obj, b)
}

// ShouldBindXML mocks base method
func (m *MockGinContext) ShouldBindXML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindXML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindXML indicates an expected call of ShouldBindXML
func (mr *MockGinContextMockRecorder) ShouldBindXML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindXML", reflect.TypeOf((*MockGinContext)(nil).ShouldBindXML), obj)
}

// ShouldBindYAML mocks base method
func (m *MockGinContext) ShouldBindYAML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindYAML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindYAML indicates an expected call of ShouldBindYAML
func (mr *MockGinContextMockRecorder) ShouldBindYAML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindYAML", reflect.TypeOf((*MockGinContext)(nil).ShouldBindYAML), obj)
}

// Status mocks base method
func (m *MockGinContext) Status(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Status", code)
}

// Status indicates an expected call of Status
func (mr *MockGinContextMockRecorder) Status(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockGinContext)(nil).Status), code)
}

// Stream mocks base method
func (m *MockGinContext) Stream(step func(io.Writer) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", step)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockGinContextMockRecorder) Stream(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockGinContext)(nil).Stream), step)
}

// String mocks base method
func (m *MockGinContext) String(code int, format string, values ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{code, format}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String
func (mr *MockGinContextMockRecorder) String(code, format interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, format}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGinContext)(nil).String), varargs...)
}

// Value mocks base method
func (m *MockGinContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockGinContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockGinContext)(nil).Value), key)
}

// XML mocks base method
func (m *MockGinContext) XML(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "XML", code, obj)
}

// XML indicates an expected call of XML
func (mr *MockGinContextMockRecorder) XML(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockGinContext)(nil).XML), code, obj)
}

// YAML mocks base method
func (m *MockGinContext) YAML(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YAML", code, obj)
}

// YAML indicates an expected call of YAML
func (mr *MockGinContextMockRecorder) YAML(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAML", reflect.TypeOf((*MockGinContext)(nil).YAML), code, obj)
}

// MockResponseWriter is a mock of ResponseWriter interface
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// CloseNotify mocks base method
func (m *MockResponseWriter) CloseNotify() <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseNotify")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// CloseNotify indicates an expected call of CloseNotify
func (mr *MockResponseWriterMockRecorder) CloseNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseNotify", reflect.TypeOf((*MockResponseWriter)(nil).CloseNotify))
}

// Flush mocks base method
func (m *MockResponseWriter) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush
func (mr *MockResponseWriterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockResponseWriter)(nil).Flush))
}

// Header mocks base method
func (m *MockResponseWriter) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockResponseWriterMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResponseWriter)(nil).Header))
}

// Hijack mocks base method
func (m *MockResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hijack")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(*bufio.ReadWriter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hijack indicates an expected call of Hijack
func (mr *MockResponseWriterMockRecorder) Hijack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockResponseWriter)(nil).Hijack))
}

// Pusher mocks base method
func (m *MockResponseWriter) Pusher() http.Pusher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pusher")
	ret0, _ := ret[0].(http.Pusher)
	return ret0
}

// Pusher indicates an expected call of Pusher
func (mr *MockResponseWriterMockRecorder) Pusher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pusher", reflect.TypeOf((*MockResponseWriter)(nil).Pusher))
}

// Size mocks base method
func (m *MockResponseWriter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockResponseWriterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockResponseWriter)(nil).Size))
}

// Status mocks base method
func (m *MockResponseWriter) Status() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockResponseWriterMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponseWriter)(nil).Status))
}

// Write mocks base method
func (m *MockResponseWriter) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockResponseWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), arg0)
}

// WriteHeader mocks base method
func (m *MockResponseWriter) WriteHeader(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", arg0)
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockResponseWriterMockRecorder) WriteHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockResponseWriter)(nil).WriteHeader), arg0)
}

// WriteHeaderNow mocks base method
func (m *MockResponseWriter) WriteHeaderNow() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeaderNow")
}

// WriteHeaderNow indicates an expected call of WriteHeaderNow
func (mr *MockResponseWriterMockRecorder) WriteHeaderNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeaderNow", reflect.TypeOf((*MockResponseWriter)(nil).WriteHeaderNow))
}

// WriteString mocks base method
func (m *MockResponseWriter) WriteString(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MockResponseWriterMockRecorder) WriteString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockResponseWriter)(nil).WriteString), arg0)
}

// Written mocks base method
func (m *MockResponseWriter) Written() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Written")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Written indicates an expected call of Written
func (mr *MockResponseWriterMockRecorder) Written() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Written", reflect.TypeOf((*MockResponseWriter)(nil).Written))
}
