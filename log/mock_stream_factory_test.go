// Code generated by MockGen. DO NOT EDIT.
// Source: log/stream_factory.go

// Package log is a generated GoMock package.
package log

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/happyhippyhippo/servlet/config"
	reflect "reflect"
)

// MockStreamFactory is a mock of StreamFactory interface
type MockStreamFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFactoryMockRecorder
}

// MockStreamFactoryMockRecorder is the mock recorder for MockStreamFactory
type MockStreamFactoryMockRecorder struct {
	mock *MockStreamFactory
}

// NewMockStreamFactory creates a new mock instance
func NewMockStreamFactory(ctrl *gomock.Controller) *MockStreamFactory {
	mock := &MockStreamFactory{ctrl: ctrl}
	mock.recorder = &MockStreamFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamFactory) EXPECT() *MockStreamFactoryMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockStreamFactory) Register(strategy StreamFactoryStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockStreamFactoryMockRecorder) Register(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStreamFactory)(nil).Register), strategy)
}

// Create mocks base method
func (m *MockStreamFactory) Create(format string, args ...interface{}) (Stream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockStreamFactoryMockRecorder) Create(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStreamFactory)(nil).Create), varargs...)
}

// CreateConfig mocks base method
func (m *MockStreamFactory) CreateConfig(conf config.Partial) (Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", conf)
	ret0, _ := ret[0].(Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockStreamFactoryMockRecorder) CreateConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockStreamFactory)(nil).CreateConfig), conf)
}
