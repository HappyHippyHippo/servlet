// Code generated by MockGen. DO NOT EDIT.
// Source: config/config.go

// Package log is a generated GoMock package.
package log

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/happyhippyhippo/servlet/config"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConfig) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConfigMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfig)(nil).Close))
}

// Has mocks base method
func (m *MockConfig) Has(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockConfigMockRecorder) Has(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfig)(nil).Has), path)
}

// Get mocks base method
func (m *MockConfig) Get(path string, def ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigMockRecorder) Get(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfig)(nil).Get), varargs...)
}

// GetBool mocks base method
func (m *MockConfig) GetBool(path string, def ...bool) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBool", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool
func (mr *MockConfigMockRecorder) GetBool(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockConfig)(nil).GetBool), varargs...)
}

// GetInt mocks base method
func (m *MockConfig) GetInt(path string, def ...int) int {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInt", varargs...)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt
func (mr *MockConfigMockRecorder) GetInt(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockConfig)(nil).GetInt), varargs...)
}

// GetInt8 mocks base method
func (m *MockConfig) GetInt8(path string, def ...int8) int8 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInt8", varargs...)
	ret0, _ := ret[0].(int8)
	return ret0
}

// GetInt8 indicates an expected call of GetInt8
func (mr *MockConfigMockRecorder) GetInt8(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt8", reflect.TypeOf((*MockConfig)(nil).GetInt8), varargs...)
}

// GetInt16 mocks base method
func (m *MockConfig) GetInt16(path string, def ...int16) int16 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInt16", varargs...)
	ret0, _ := ret[0].(int16)
	return ret0
}

// GetInt16 indicates an expected call of GetInt16
func (mr *MockConfigMockRecorder) GetInt16(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt16", reflect.TypeOf((*MockConfig)(nil).GetInt16), varargs...)
}

// GetInt32 mocks base method
func (m *MockConfig) GetInt32(path string, def ...int32) int32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInt32", varargs...)
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetInt32 indicates an expected call of GetInt32
func (mr *MockConfigMockRecorder) GetInt32(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt32", reflect.TypeOf((*MockConfig)(nil).GetInt32), varargs...)
}

// GetInt64 mocks base method
func (m *MockConfig) GetInt64(path string, def ...int64) int64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInt64", varargs...)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64
func (mr *MockConfigMockRecorder) GetInt64(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockConfig)(nil).GetInt64), varargs...)
}

// GetUInt mocks base method
func (m *MockConfig) GetUInt(path string, def ...uint) uint {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUInt", varargs...)
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetUInt indicates an expected call of GetUInt
func (mr *MockConfigMockRecorder) GetUInt(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUInt", reflect.TypeOf((*MockConfig)(nil).GetUInt), varargs...)
}

// GetUInt8 mocks base method
func (m *MockConfig) GetUInt8(path string, def ...uint8) uint8 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUInt8", varargs...)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetUInt8 indicates an expected call of GetUInt8
func (mr *MockConfigMockRecorder) GetUInt8(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUInt8", reflect.TypeOf((*MockConfig)(nil).GetUInt8), varargs...)
}

// GetUInt16 mocks base method
func (m *MockConfig) GetUInt16(path string, def ...uint16) uint16 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUInt16", varargs...)
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetUInt16 indicates an expected call of GetUInt16
func (mr *MockConfigMockRecorder) GetUInt16(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUInt16", reflect.TypeOf((*MockConfig)(nil).GetUInt16), varargs...)
}

// GetUInt32 mocks base method
func (m *MockConfig) GetUInt32(path string, def ...uint32) uint32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUInt32", varargs...)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetUInt32 indicates an expected call of GetUInt32
func (mr *MockConfigMockRecorder) GetUInt32(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUInt32", reflect.TypeOf((*MockConfig)(nil).GetUInt32), varargs...)
}

// GetUInt64 mocks base method
func (m *MockConfig) GetUInt64(path string, def ...uint64) uint64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUInt64", varargs...)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUInt64 indicates an expected call of GetUInt64
func (mr *MockConfigMockRecorder) GetUInt64(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUInt64", reflect.TypeOf((*MockConfig)(nil).GetUInt64), varargs...)
}

// GetFloat32 mocks base method
func (m *MockConfig) GetFloat32(path string, def ...float32) float32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFloat32", varargs...)
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetFloat32 indicates an expected call of GetFloat32
func (mr *MockConfigMockRecorder) GetFloat32(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat32", reflect.TypeOf((*MockConfig)(nil).GetFloat32), varargs...)
}

// GetFloat64 mocks base method
func (m *MockConfig) GetFloat64(path string, def ...float64) float64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFloat64", varargs...)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64
func (mr *MockConfigMockRecorder) GetFloat64(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockConfig)(nil).GetFloat64), varargs...)
}

// GetComplex64 mocks base method
func (m *MockConfig) GetComplex64(path string, def ...complex64) complex64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplex64", varargs...)
	ret0, _ := ret[0].(complex64)
	return ret0
}

// GetComplex64 indicates an expected call of GetComplex64
func (mr *MockConfigMockRecorder) GetComplex64(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplex64", reflect.TypeOf((*MockConfig)(nil).GetComplex64), varargs...)
}

// GetComplex128 mocks base method
func (m *MockConfig) GetComplex128(path string, def ...complex128) complex128 {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplex128", varargs...)
	ret0, _ := ret[0].(complex128)
	return ret0
}

// GetComplex128 indicates an expected call of GetComplex128
func (mr *MockConfigMockRecorder) GetComplex128(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplex128", reflect.TypeOf((*MockConfig)(nil).GetComplex128), varargs...)
}

// GetRune mocks base method
func (m *MockConfig) GetRune(path string, def ...rune) rune {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRune", varargs...)
	ret0, _ := ret[0].(rune)
	return ret0
}

// GetRune indicates an expected call of GetRune
func (mr *MockConfigMockRecorder) GetRune(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRune", reflect.TypeOf((*MockConfig)(nil).GetRune), varargs...)
}

// GetString mocks base method
func (m *MockConfig) GetString(path string, def ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range def {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetString", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockConfigMockRecorder) GetString(path interface{}, def ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, def...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfig)(nil).GetString), varargs...)
}

// HasSource mocks base method
func (m *MockConfig) HasSource(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSource", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSource indicates an expected call of HasSource
func (mr *MockConfigMockRecorder) HasSource(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSource", reflect.TypeOf((*MockConfig)(nil).HasSource), id)
}

// AddSource mocks base method
func (m *MockConfig) AddSource(id string, priority int, source config.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSource", id, priority, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSource indicates an expected call of AddSource
func (mr *MockConfigMockRecorder) AddSource(id, priority, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockConfig)(nil).AddSource), id, priority, source)
}

// RemoveSource mocks base method
func (m *MockConfig) RemoveSource(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSource", id)
}

// RemoveSource indicates an expected call of RemoveSource
func (mr *MockConfigMockRecorder) RemoveSource(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSource", reflect.TypeOf((*MockConfig)(nil).RemoveSource), id)
}

// Source mocks base method
func (m *MockConfig) Source(id string) (config.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source", id)
	ret0, _ := ret[0].(config.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Source indicates an expected call of Source
func (mr *MockConfigMockRecorder) Source(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockConfig)(nil).Source), id)
}

// SourcePriority mocks base method
func (m *MockConfig) SourcePriority(id string, priority int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcePriority", id, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// SourcePriority indicates an expected call of SourcePriority
func (mr *MockConfigMockRecorder) SourcePriority(id, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcePriority", reflect.TypeOf((*MockConfig)(nil).SourcePriority), id, priority)
}

// HasObserver mocks base method
func (m *MockConfig) HasObserver(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasObserver", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasObserver indicates an expected call of HasObserver
func (mr *MockConfigMockRecorder) HasObserver(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasObserver", reflect.TypeOf((*MockConfig)(nil).HasObserver), path)
}

// AddObserver mocks base method
func (m *MockConfig) AddObserver(path string, callback config.Observer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObserver", path, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddObserver indicates an expected call of AddObserver
func (mr *MockConfigMockRecorder) AddObserver(path, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObserver", reflect.TypeOf((*MockConfig)(nil).AddObserver), path, callback)
}

// RemoveObserver mocks base method
func (m *MockConfig) RemoveObserver(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveObserver", path)
}

// RemoveObserver indicates an expected call of RemoveObserver
func (mr *MockConfigMockRecorder) RemoveObserver(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObserver", reflect.TypeOf((*MockConfig)(nil).RemoveObserver), path)
}
