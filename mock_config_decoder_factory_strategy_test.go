// Code generated by MockGen. DO NOT EDIT.
// Source: config_decoder_factory_strategy.go

// Package servlet is a generated GoMock package.
package servlet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigDecoderFactoryStrategy is a mock of ConfigDecoderFactoryStrategy interface
type MockConfigDecoderFactoryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDecoderFactoryStrategyMockRecorder
}

// MockConfigDecoderFactoryStrategyMockRecorder is the mock recorder for MockConfigDecoderFactoryStrategy
type MockConfigDecoderFactoryStrategyMockRecorder struct {
	mock *MockConfigDecoderFactoryStrategy
}

// NewMockConfigDecoderFactoryStrategy creates a new mock instance
func NewMockConfigDecoderFactoryStrategy(ctrl *gomock.Controller) *MockConfigDecoderFactoryStrategy {
	mock := &MockConfigDecoderFactoryStrategy{ctrl: ctrl}
	mock.recorder = &MockConfigDecoderFactoryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigDecoderFactoryStrategy) EXPECT() *MockConfigDecoderFactoryStrategyMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockConfigDecoderFactoryStrategy) Accept(format string, args ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockConfigDecoderFactoryStrategyMockRecorder) Accept(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockConfigDecoderFactoryStrategy)(nil).Accept), varargs...)
}

// Create mocks base method
func (m *MockConfigDecoderFactoryStrategy) Create(args ...interface{}) (ConfigDecoder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(ConfigDecoder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockConfigDecoderFactoryStrategyMockRecorder) Create(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigDecoderFactoryStrategy)(nil).Create), args...)
}
